// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// Rginv
arma::mat Rginv(arma::mat m);
RcppExport SEXP _MarkovSwitchingDCF_Rginv(SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(Rginv(m));
    return rcpp_result_gen;
END_RCPP
}
// gen_inv
arma::mat gen_inv(arma::mat m);
RcppExport SEXP _MarkovSwitchingDCF_gen_inv(SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(gen_inv(m));
    return rcpp_result_gen;
END_RCPP
}
// ss_prob
arma::mat ss_prob(arma::mat mat);
RcppExport SEXP _MarkovSwitchingDCF_ss_prob(SEXP matSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type mat(matSEXP);
    rcpp_result_gen = Rcpp::wrap(ss_prob(mat));
    return rcpp_result_gen;
END_RCPP
}
// v_prob
arma::mat v_prob(arma::mat EV, arma::mat HE);
RcppExport SEXP _MarkovSwitchingDCF_v_prob(SEXP EVSEXP, SEXP HESEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type EV(EVSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type HE(HESEXP);
    rcpp_result_gen = Rcpp::wrap(v_prob(EV, HE));
    return rcpp_result_gen;
END_RCPP
}
// kim_filter
Rcpp::List kim_filter(arma::cube B0, arma::cube P0, arma::cube At, arma::cube Dt, arma::cube Ft, arma::cube Ht, arma::cube Qt, arma::cube Rt, arma::mat Tr_mat, arma::mat yt);
RcppExport SEXP _MarkovSwitchingDCF_kim_filter(SEXP B0SEXP, SEXP P0SEXP, SEXP AtSEXP, SEXP DtSEXP, SEXP FtSEXP, SEXP HtSEXP, SEXP QtSEXP, SEXP RtSEXP, SEXP Tr_matSEXP, SEXP ytSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube >::type B0(B0SEXP);
    Rcpp::traits::input_parameter< arma::cube >::type P0(P0SEXP);
    Rcpp::traits::input_parameter< arma::cube >::type At(AtSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type Dt(DtSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type Ft(FtSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type Ht(HtSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type Qt(QtSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type Rt(RtSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Tr_mat(Tr_matSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type yt(ytSEXP);
    rcpp_result_gen = Rcpp::wrap(kim_filter(B0, P0, At, Dt, Ft, Ht, Qt, Rt, Tr_mat, yt));
    return rcpp_result_gen;
END_RCPP
}
// kim_smoother
Rcpp::List kim_smoother(arma::cube B_tlss, arma::cube B_tts, arma::field<arma::cube> P_tlss, arma::field<arma::cube> P_tts, arma::mat Pr_tls, arma::mat Pr_tts, arma::cube At, arma::cube Dt, arma::cube Ft, arma::cube Ht, arma::cube Qt, arma::cube Rt, arma::mat Tr_mat);
RcppExport SEXP _MarkovSwitchingDCF_kim_smoother(SEXP B_tlssSEXP, SEXP B_ttsSEXP, SEXP P_tlssSEXP, SEXP P_ttsSEXP, SEXP Pr_tlsSEXP, SEXP Pr_ttsSEXP, SEXP AtSEXP, SEXP DtSEXP, SEXP FtSEXP, SEXP HtSEXP, SEXP QtSEXP, SEXP RtSEXP, SEXP Tr_matSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube >::type B_tlss(B_tlssSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type B_tts(B_ttsSEXP);
    Rcpp::traits::input_parameter< arma::field<arma::cube> >::type P_tlss(P_tlssSEXP);
    Rcpp::traits::input_parameter< arma::field<arma::cube> >::type P_tts(P_ttsSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Pr_tls(Pr_tlsSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Pr_tts(Pr_ttsSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type At(AtSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type Dt(DtSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type Ft(FtSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type Ht(HtSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type Qt(QtSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type Rt(RtSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Tr_mat(Tr_matSEXP);
    rcpp_result_gen = Rcpp::wrap(kim_smoother(B_tlss, B_tts, P_tlss, P_tts, Pr_tls, Pr_tts, At, Dt, Ft, Ht, Qt, Rt, Tr_mat));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_hello_world
arma::mat rcpparma_hello_world();
RcppExport SEXP _MarkovSwitchingDCF_rcpparma_hello_world() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(rcpparma_hello_world());
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_outerproduct
arma::mat rcpparma_outerproduct(const arma::colvec& x);
RcppExport SEXP _MarkovSwitchingDCF_rcpparma_outerproduct(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_outerproduct(x));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_innerproduct
double rcpparma_innerproduct(const arma::colvec& x);
RcppExport SEXP _MarkovSwitchingDCF_rcpparma_innerproduct(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_innerproduct(x));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_bothproducts
Rcpp::List rcpparma_bothproducts(const arma::colvec& x);
RcppExport SEXP _MarkovSwitchingDCF_rcpparma_bothproducts(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_bothproducts(x));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_MarkovSwitchingDCF_Rginv", (DL_FUNC) &_MarkovSwitchingDCF_Rginv, 1},
    {"_MarkovSwitchingDCF_gen_inv", (DL_FUNC) &_MarkovSwitchingDCF_gen_inv, 1},
    {"_MarkovSwitchingDCF_ss_prob", (DL_FUNC) &_MarkovSwitchingDCF_ss_prob, 1},
    {"_MarkovSwitchingDCF_v_prob", (DL_FUNC) &_MarkovSwitchingDCF_v_prob, 2},
    {"_MarkovSwitchingDCF_kim_filter", (DL_FUNC) &_MarkovSwitchingDCF_kim_filter, 10},
    {"_MarkovSwitchingDCF_kim_smoother", (DL_FUNC) &_MarkovSwitchingDCF_kim_smoother, 13},
    {"_MarkovSwitchingDCF_rcpparma_hello_world", (DL_FUNC) &_MarkovSwitchingDCF_rcpparma_hello_world, 0},
    {"_MarkovSwitchingDCF_rcpparma_outerproduct", (DL_FUNC) &_MarkovSwitchingDCF_rcpparma_outerproduct, 1},
    {"_MarkovSwitchingDCF_rcpparma_innerproduct", (DL_FUNC) &_MarkovSwitchingDCF_rcpparma_innerproduct, 1},
    {"_MarkovSwitchingDCF_rcpparma_bothproducts", (DL_FUNC) &_MarkovSwitchingDCF_rcpparma_bothproducts, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_MarkovSwitchingDCF(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
